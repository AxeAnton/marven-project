<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- 1. Синтексис XML файла-->
    <!-- 3. В папке java (исходный код), а не в папке src-->
    <!-- 4. Папка target вместо out там будут скомпилированные файла и jar архивы   -->


    <!-- 2. Сокращенно GAV - group/artifactId/version -->
    <groupId>ru.itmo</groupId>   <!-- 2.1 идентификатор разработчика обычно доменное имя компании-->
    <artifactId>marven-project</artifactId> <!-- 2.2 идентификатор проекта, обычно название проекта, но могут быть и другие-->
    <version>1.0-SNAPSHOT</version> <!-- 2.3 версия проекта-->
    <!-- 2.3 SNAPSHOT говорит о том, что проект текущей версии в разработке и может измениться -->

    <!--  2й урок 1. - Дополнительная информация о проекте  -->
    <name>Marvel Project </name> <!-- 2й урок 2.- красивое название проекта, делаем сами  -->
    <description>About</description> <!-- 2й урок 3. - описание проекта, о чем...  -->
    <url>https://project.ru</url> <!-- 2й урок 4. - ссылка на сайт проекта, на git, документацию или исходный код, можно не размещать  -->
    <packaging>jar</packaging> <!-- 2й урок 5. - какой тип файла будет собран, jar по умолчанию, если пишем pom - то он то jar файл так же не генерируется и это только для организации наследования в модуле, для родителей (у родителя в модульной сборке будет всегда pom). Так же может быть тип war для web приложений  -->


    <properties>
        <!--7. в общем цифры 18ть должны быть одинаковы-->
        <maven.compiler.source>18</maven.compiler.source> <!-- 5. минимальная версия компилятора, т.к по умаолчанию 6 или 7 версия учитывается -->
        <maven.compiler.target>18</maven.compiler.target> <!-- 6. мин версия JDK--> <!-- минимальная версия компилятора -->

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <!-- 7. кодировка проекта -->
        <project.build.outputEncoding>UTF-8</project.build.outputEncoding>
    </properties>
    <!-- 7. Когда, что-то поменяли (особенно зависимости(библиотеки) или плагины) в этом файле необходимо обновить, иконка 'm" в правом углу или правая кнопка мыши и Marven -> reload project -->
    <!-- 8. Можно открыть меню справа (кнопка MARVEL), покажет фазы:
    - 9. фаза clean - удаление папки со скомпилированными файлами (папки target).
    - 10. фаза validation - проверка исходного кода выполняется перед этапом комп-ии.
    - 11. фаза compile - компиляция, генерация папки target и появления файлов с расширением class,
    - 12. фаза test - запуск всех написанных тестов,
    - 13. фаза package - сборка архивного файла (jar) либо исполняемого, либо нет.
    - 14. фаза verify - проверка архива, того, что собралось
    - 15. фаза install - установка проекта в локальный репозиторий (на компе).
    - 16. фаза site - генерация сайта проекта.
    - 17. фаза deploy - выгрузка в удаленный репозиторий (не git репозиторий).
    18. У каждой фазы есть фаза до и фаза после (pre and past).
    19. При выполнении/ручном запуске некоторых фаз, предшествующие фазы будут запущены автоматически.
     -->
    <!-- 20. Plugins - программы работующие на определенных фазах. Они необходимы, что бы выполнились фазы (один или несколько плагинов, которые будут решать определенные задачи)  -->
    <!-- 21. Каждый плагин может выполнять несколько задач их можно привязать к фазам. Плагины можно перенастроить или заменить одни другими или использовать свои -->
    <!-- 22. Plugins/jar.jar не удобен в настройках, т.к собирает, НЕ исполняемый jar файл (без зависимостями между модулями), поэтому его часто заменяют + доп плагины при необходимости -->

     <!-- 35.
     Плагины и зависимости берутся из репозитория, типы репозиториев:
         a. - локальный на компьютере. file -> settings - >build... -> Build tools -> Marven. Имя папки всегда ".m2". Выложить свою библиотеку можно фазой  Install.
         b. - центральный или глобальный, хранятся различные плагины и библиотеки, что бы скачать нужен интернет. Выложить свою библиотеку в центральный не так легко.
     Сначала поиск осуществляется Марвелом в локальном репозитории, если там не находится то обращается в центральный репозиторий, то из центрального скачивается в локальный и подключается к проекту.
     Между, локальным и центральным есть корпоративный репозиторий, когда компания не готова делиться с кем то еще.
     В независимости от репозитория необходимо указывать - groupId, artifactId и желательно version.
     -->
     <!-- 36. <version>1.0-SNAPSHOT</version>--> <!--если SNAPSHOT, значит версия в разработке, марвен пойдет в глобальный и проверит на наличие свежей версии-->
    <!-- 37. Если марвин не видит что версия на локалке в разработке, идет в глобальном репозитории-->
     <!-- 38. <version>1.0 </version>--> <!-- если версия конечна без SNAPSHOT, то берет ее-->


    <dependencies> <!-- 2й урок 6. - зависимости это наборы классов упакованных в jar файлы которые мы хотим использовать в своих программах, все зависимости будут заключаться в тзг <dependenses>   -->
        <dependency>    <!-- 2й урок 7.- каждая зависимость   -->
            <!-- 2й урок 8 - обязательные данные для подключения зависимости(БИБЛИОТЕКИ) groupId и artifactId  -->
            <!-- 2й урок 8.1 -Информацию о библиотеке берем из интернета (кто то поскажет или сами найдем, центральное хранилище всех библиотек находится по адресу MVNREPOSITORY.COM, переходим по ссылке из браузера, в таблице будет представлен список версий, кликаем последнюю, выбираем закладку Marven и копируем три строки groupId, artifactId и version  )-->
            <!--2й урок 8.2 - запускаем библиотеку, справа в менющке появится Lifecycle, Plagins, Dependencies их можно раскрыть и там еще зависимости в виде библиотек которые подтягивает присоедененная библиотека.  -->
            <groupId>org.apache.httpcomponents</groupId> <!---->
            <artifactId>httpclient</artifactId> <!--15. библиотека позволяет отправить запрос на приложение(сервер) по http протоколу и получать ответ => Application-->
            <version>4.5.13</version> <!--2й урок 9. - версию то же желательно указывать-->
            <!-- 2й урок 10. - область видимости и доступности библиотеки которую будем подгружать, по умолчанию это в тэг scope - <scope>compile</scope> - значит что библиотечка будет доступна во время компиляции, выполнения и тестирования. Также это означает, что библиотека попадет в jar файл  -->
            <!-- 2й урок 11. - в скобках можем написать <scope>test</scope> - она не доступна во время выполнения программы и не попадает в финальную версию, необходима только для тестирования и написания программы   -->
            <!-- 2й урок 12. - в скобках можем написать <scope>runtime</scope> - библиотека доступна во время выполнения и тестирования, не будут доступны на этапе разработки  -->
            <!-- 2й урок 13. - в скобках можем написать <scope>provididt</scope> библиотека доступна на этапе разработки/компиляции но не попадает в jar файл. Обычно это библиотеки, которые генерируют кода  -->
            <!-- 2й урок 14. - в скобках можем написать <scope>system</scope> - используется всегда вместе с тегом <systemPath>путь к файлу</systemPath> это если надо добавить jar файл, который находится на собственном компьютере -->
            <scope>compile</scope>

        </dependency>

        <dependency>  <!-- 2й урок 47 - зависимость необходима, что бы из jeson строчки создавать объекты и объекты преобразовавать в json строчку. - это основа без нее ни куда....-->
            <!--2й урок 48 - три строчки ниже это анатауия с помощью нее мы можем указать какие данные пойдут в jason строчку а какие нет, т.е можем управлять названиями свойств, например в объекте название свойства одно а мы хотим другое + анатации помогают корректно преобразовавать данные и другие сложные типы.-->
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.12.0</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.11.2</version>
        </dependency>
        <!--2й урок 49 - Ниже две зависимости для работы с датой и временем, корректро преобразовать в jason строчку и обратно.  -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.11.2</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.11.2</version>
        </dependency>

    </dependencies>




    <build>
        <!-- 39. Про ПОДКЛЮЧЕНИЕ плагинов, реализуется в теге build-->
        <plugins>     <!-- 40. все которые нужны проекту заключаются в pluginS-->
            <plugin>     <!--41. описание отдельного плагина, для каждого необходим отдельный плагин-->
                <groupId>org.apache.maven.plugins</groupId> <!-- берутся из инта-->
                <artifactId>maven-javadoc-plugin</artifactId><!-- берутся из инта-->
                <version>3.2.0</version><!-- берутся из инта-->
                <!-- 42. что можно донастроить надо смотреть в документации плагина-->
                <configuration>     <!-- 43. дополнительная настройка-->
                    <show>private</show>     <!--44. например - отражать приватные свойства и методы включая документацию-->
                </configuration>
                <!--45. привязки к фазам сборки-->
                <executions>     <!--46. все привязки-->
                    <execution> <!--47.привязка задачи к определенной фазе-->
                        <phase>package</phase>     <!--48. название фазы сборки-->
                        <goals>    <!-- 49. все задачи-->
                            <goal>aggregate</goal> <!--50. одна задача или несколько-->
<!--                        <goal>aggregate</goal>  вторая задача и тд.
                            <goal>aggregate</goal>
                            -->
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 52. ПЕРЕНАСТРОЙКА плагина, изменение существующего-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.9.1</version> <!-- 53. справа в дереве есть плагин site у него версия 3.3.1, мы указываем новую, привязавать его заново НЕ нужно -->

                <configuration>
                    <locales>en,fr</locales> <!-- 54. на двух языках документацию хоти -->
                </configuration>
            </plugin>
            <!-- 55. Еще один плагин - ВМЕСТО jar плагина(замена плагина) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.3</version>

                <executions>
                    <execution> <!--56.привязка задачи к определенной фазе-->
                    <phase>package</phase> <!-- привязка плагина к фазе package  -->
                        <goals>
                            <goal>shade</goal> <!-- 57. задача означает, что надо собрать jar архив и включить в него все библиотечки и зависимости--> <!--и если это задача сборки jar архива, то плагин jar уже не будет работать, вместо него будет собирать файл наш новый плагин -->
                        </goals>
                    </execution>
                </executions>

                <configuration> <!--58. Дополнительные настройки, можно указать много чего, какие папки игнорить, какие нет и т.д а так же можно указать -->
                    <!-- 59. что бы jar стал исполняемым нужно создать манифест файла, и указать main класс с точкой входа-->
                    <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"> <!--60. манифест с атрибутом имплементации-->
                            <mainClass>ru.itmo.lesson.Application</mainClass><!--61. точка входа-->
                        </transformer>
                    </transformers>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
     </build>
</project>